les components de mon travil 
Voici une explication de chaque composant et contexte de votre projet :
Composants principaux
Navbar (Navbar.jsx, Navbar.css)
Barre de navigation responsive qui s'adapte selon que l'utilisateur est connecté ou non
Contient des liens vers les différentes pages (Accueil, Fonctionnalités, Contact, etc.)
Inclut un bouton de bascule du thème (clair/sombre)
Affiche le nom de l'utilisateur et propose un bouton de déconnexion lorsqu'il est connecté


HomePage (HomePage.jsx, HomePage.css)
Page d'accueil principale de l'application
Présente les fonctionnalités clés du service avec des visuels et des descriptions
Inclut une section d'appel à l'action (CTA) pour inciter les utilisateurs à s'inscrire
Affiche différemment selon que l'utilisateur est connecté ou non
FeaturesPage (FeaturesPage.jsx, FeaturesPage.css)
Présente toutes les fonctionnalités disponibles sous forme de cartes
Permet de filtrer les fonctionnalités par catégorie et par recherche
Identifie les fonctionnalités premium et restreint l'accès aux utilisateurs ayant un compte gratuit
Affiche une bannière pour encourager la mise à niveau vers un compte premium
LoginForm (LoginForm.jsx, LoginForm.css)
Formulaire de connexion avec validation des champs
Propose une option "Se souvenir de moi"
Affiche des messages d'erreur et de succès
Redirige vers la page des fonctionnalités après connexion réussie
RegistrationForm (RegistrationForm.jsx, RegistrationForm.css)
Formulaire d'inscription détaillé avec validation des champs
Permet de choisir entre un compte gratuit et premium
Inclut des options pour les centres d'intérêt et l'acceptation des conditions générales
Enregistre les données utilisateur et connecte automatiquement après inscription
UserDashboard (UserDashboard.jsx, UserDashboard.css)
Tableau de bord personnel pour les utilisateurs connectés
Affiche des statistiques d'utilisation et les fonctionnalités récemment utilisées
Permet de gérer les préférences et les paramètres du compte
Propose des options pour mettre à niveau l'abonnement
AdminDashboard (AdminDashboard.jsx, AdminDashboard.css)
Interface d'administration pour les utilisateurs ayant le rôle d'administrateur
Permet de gérer les fonctionnalités (ajout, modification, suppression)
Affiche des statistiques sur l'utilisation de la plateforme
Inclut un système de gestion des utilisateurs
ContactPage (ContactPage.jsx, ContactPage.css)
Page dédiée au contact avec un formulaire de message
Affiche des informations de contact (adresse, téléphone, email)
Inclut les horaires d'ouverture et des liens vers les réseaux sociaux
Contient une FAQ et un emplacement pour une carte
ContactForm (ContactForm.jsx, ContactForm.css)
Version plus simple du formulaire de contact
Était utilisé avant la création de la page de contact complète
WorkflowCalculator (WorkflowCalculator.jsx, WorkflowCalculator.css)
Outil permettant de calculer des flux de travail
Interface avec des entrées pour différents paramètres et affichage des résultats
EditFeature (EditFeature.jsx, EditFeature.css)
Interface pour modifier les détails d'une fonctionnalité
Accessible depuis le tableau de bord administrateur
Permet de mettre à jour le titre, la description, la catégorie et le statut premium
ThemeToggle (ThemeToggle.jsx, ThemeToggle.css)
Bouton qui permet de basculer entre le thème clair et sombre
Affiche différentes icônes selon le thème actif
Utilisé dans la barre de navigation
Footer (Footer.jsx, Footer.css)
Pied de page présent sur toutes les pages
Contient des liens vers les pages principales et des informations légales
S'adapte au thème clair/sombre
Contextes
AuthContext (AuthContext.jsx)
Gère l'état d'authentification de l'utilisateur
Fournit des fonctions pour la connexion, déconnexion et mise à jour du type de compte
Stocke les informations utilisateur dans le localStorage
Accessible dans toute l'application via le hook useAuth
ThemeContext (ThemeContext.jsx)
Gère le thème de l'application (clair/sombre)
Permet de basculer entre les thèmes
Stocke la préférence de thème dans le localStorage
Accessible dans toute l'application via le hook useTheme
Architecture globale
Votre application suit une architecture React moderne avec :
Des composants fonctionnels et des hooks React
Des contextes pour gérer les états globaux (authentification, thème)
Utilisation de React Router pour la navigation entre les pages
Stockage des données utilisateur dans localStorage (simulation de backend)
Styles CSS modulaires pour chaque composant
Support des thèmes clair et sombre
L'application permet aux utilisateurs de s'inscrire, se connecter, explorer les fonctionnalités disponibles, accéder à des fonctionnalités premium avec un compte approprié, contacter l'équipe, et pour les administrateurs, gérer les fonctionnalités et les utilisateurs.
Le projet est bien structuré avec une séparation claire des responsabilités entre les composants, et utilise des approches modernes de développement React.
